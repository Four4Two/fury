// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/bep3/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateAtomicSwap defines the Msg/CreateAtomicSwap request type.
type MsgCreateAtomicSwap struct {
	From                string                                   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                  string                                   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	RecipientOtherChain string                                   `protobuf:"bytes,3,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty"`
	SenderOtherChain    string                                   `protobuf:"bytes,4,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty"`
	RandomNumberHash    string                                   `protobuf:"bytes,5,opt,name=random_number_hash,json=randomNumberHash,proto3" json:"random_number_hash,omitempty"`
	Timestamp           int64                                    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	HeightSpan          uint64                                   `protobuf:"varint,8,opt,name=height_span,json=heightSpan,proto3" json:"height_span,omitempty"`
}

func (m *MsgCreateAtomicSwap) Reset()      { *m = MsgCreateAtomicSwap{} }
func (*MsgCreateAtomicSwap) ProtoMessage() {}
func (*MsgCreateAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{0}
}
func (m *MsgCreateAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAtomicSwap.Merge(m, src)
}
func (m *MsgCreateAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAtomicSwap proto.InternalMessageInfo

// MsgCreateAtomicSwapResponse defines the Msg/CreateAtomicSwap response type.
type MsgCreateAtomicSwapResponse struct {
}

func (m *MsgCreateAtomicSwapResponse) Reset()         { *m = MsgCreateAtomicSwapResponse{} }
func (m *MsgCreateAtomicSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAtomicSwapResponse) ProtoMessage()    {}
func (*MsgCreateAtomicSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{1}
}
func (m *MsgCreateAtomicSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAtomicSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAtomicSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAtomicSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAtomicSwapResponse.Merge(m, src)
}
func (m *MsgCreateAtomicSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAtomicSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAtomicSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAtomicSwapResponse proto.InternalMessageInfo

// MsgClaimAtomicSwap defines the Msg/ClaimAtomicSwap request type.
type MsgClaimAtomicSwap struct {
	From         string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	SwapID       string `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	RandomNumber string `protobuf:"bytes,3,opt,name=random_number,json=randomNumber,proto3" json:"random_number,omitempty"`
}

func (m *MsgClaimAtomicSwap) Reset()      { *m = MsgClaimAtomicSwap{} }
func (*MsgClaimAtomicSwap) ProtoMessage() {}
func (*MsgClaimAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{2}
}
func (m *MsgClaimAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAtomicSwap.Merge(m, src)
}
func (m *MsgClaimAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAtomicSwap proto.InternalMessageInfo

// MsgClaimAtomicSwapResponse defines the Msg/ClaimAtomicSwap response type.
type MsgClaimAtomicSwapResponse struct {
}

func (m *MsgClaimAtomicSwapResponse) Reset()         { *m = MsgClaimAtomicSwapResponse{} }
func (m *MsgClaimAtomicSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAtomicSwapResponse) ProtoMessage()    {}
func (*MsgClaimAtomicSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{3}
}
func (m *MsgClaimAtomicSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAtomicSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAtomicSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAtomicSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAtomicSwapResponse.Merge(m, src)
}
func (m *MsgClaimAtomicSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAtomicSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAtomicSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAtomicSwapResponse proto.InternalMessageInfo

// MsgRefundAtomicSwap defines the Msg/RefundAtomicSwap request type.
type MsgRefundAtomicSwap struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	SwapID string `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
}

func (m *MsgRefundAtomicSwap) Reset()      { *m = MsgRefundAtomicSwap{} }
func (*MsgRefundAtomicSwap) ProtoMessage() {}
func (*MsgRefundAtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{4}
}
func (m *MsgRefundAtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAtomicSwap.Merge(m, src)
}
func (m *MsgRefundAtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAtomicSwap proto.InternalMessageInfo

// MsgRefundAtomicSwapResponse defines the Msg/RefundAtomicSwap response type.
type MsgRefundAtomicSwapResponse struct {
}

func (m *MsgRefundAtomicSwapResponse) Reset()         { *m = MsgRefundAtomicSwapResponse{} }
func (m *MsgRefundAtomicSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAtomicSwapResponse) ProtoMessage()    {}
func (*MsgRefundAtomicSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa9dd299005c743, []int{5}
}
func (m *MsgRefundAtomicSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAtomicSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAtomicSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAtomicSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAtomicSwapResponse.Merge(m, src)
}
func (m *MsgRefundAtomicSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAtomicSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAtomicSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAtomicSwapResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateAtomicSwap)(nil), "fury.bep3.v1beta1.MsgCreateAtomicSwap")
	proto.RegisterType((*MsgCreateAtomicSwapResponse)(nil), "fury.bep3.v1beta1.MsgCreateAtomicSwapResponse")
	proto.RegisterType((*MsgClaimAtomicSwap)(nil), "fury.bep3.v1beta1.MsgClaimAtomicSwap")
	proto.RegisterType((*MsgClaimAtomicSwapResponse)(nil), "fury.bep3.v1beta1.MsgClaimAtomicSwapResponse")
	proto.RegisterType((*MsgRefundAtomicSwap)(nil), "fury.bep3.v1beta1.MsgRefundAtomicSwap")
	proto.RegisterType((*MsgRefundAtomicSwapResponse)(nil), "fury.bep3.v1beta1.MsgRefundAtomicSwapResponse")
}

func init() { proto.RegisterFile("fury/bep3/v1beta1/tx.proto", fileDescriptor_0fa9dd299005c743) }

var fileDescriptor_0fa9dd299005c743 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0x6e, 0x77, 0x71, 0x91, 0x01, 0x23, 0x0e, 0x98, 0x94, 0x8a, 0xed, 0x06, 0x82, 0xe9, 0x01,
	0x5a, 0x01, 0x4f, 0x5e, 0x0c, 0xe0, 0x41, 0x0e, 0x68, 0x52, 0x6e, 0x5e, 0x9a, 0x69, 0x3b, 0xdb,
	0x0e, 0xda, 0x99, 0x66, 0x66, 0xca, 0xc2, 0x7f, 0xe0, 0xd1, 0xa3, 0xf1, 0xb4, 0x67, 0x2f, 0x5e,
	0xfc, 0x1b, 0x0c, 0x47, 0xe2, 0xc9, 0x13, 0x9a, 0xdd, 0x8b, 0x7f, 0x86, 0xe9, 0x8f, 0x5d, 0xd9,
	0x5f, 0x91, 0x98, 0x78, 0xda, 0x9d, 0xf7, 0x7d, 0xef, 0xcd, 0x9b, 0xef, 0xeb, 0x7b, 0x40, 0x6f,
	0x65, 0xfc, 0xdc, 0xf1, 0x71, 0xba, 0xeb, 0x9c, 0x6e, 0xfb, 0x58, 0xa2, 0x6d, 0x47, 0x9e, 0xd9,
	0x29, 0x67, 0x92, 0xc1, 0x7b, 0x39, 0x66, 0xe7, 0x98, 0x5d, 0x61, 0xba, 0x11, 0x30, 0x91, 0x30,
	0xe1, 0xf8, 0x48, 0xe0, 0x41, 0x42, 0xc0, 0x08, 0x2d, 0x53, 0xf4, 0x95, 0x12, 0xf7, 0x8a, 0x93,
	0x53, 0x1e, 0x2a, 0x68, 0x39, 0x62, 0x11, 0x2b, 0xe3, 0xf9, 0xbf, 0x32, 0xba, 0xf6, 0xb9, 0x0e,
	0x96, 0x8e, 0x44, 0x74, 0xc0, 0x31, 0x92, 0x78, 0x4f, 0xb2, 0x84, 0x04, 0xc7, 0x6d, 0x94, 0xc2,
	0x4d, 0x30, 0xd3, 0xe2, 0x2c, 0xd1, 0xd4, 0xa6, 0x6a, 0xcd, 0xed, 0x6b, 0xdf, 0xbe, 0x6c, 0x2d,
	0x57, 0xd5, 0xf6, 0xc2, 0x90, 0x63, 0x21, 0x8e, 0x25, 0x27, 0x34, 0x72, 0x0b, 0x16, 0xb4, 0x40,
	0x4d, 0x32, 0xad, 0xf6, 0x17, 0x6e, 0x4d, 0x32, 0xb8, 0x03, 0xee, 0x73, 0x1c, 0x90, 0x94, 0x60,
	0x2a, 0x3d, 0x26, 0x63, 0xcc, 0xbd, 0x20, 0x46, 0x84, 0x6a, 0xf5, 0x3c, 0xd9, 0x5d, 0x1a, 0x80,
	0xaf, 0x72, 0xec, 0x20, 0x87, 0xe0, 0x26, 0x80, 0x02, 0xd3, 0x10, 0xf3, 0xa1, 0x84, 0x99, 0x22,
	0x61, 0xb1, 0x44, 0x86, 0xd9, 0x1c, 0xd1, 0x90, 0x25, 0x1e, 0xcd, 0x12, 0x1f, 0x73, 0x2f, 0x46,
	0x22, 0xd6, 0x6e, 0x95, 0xec, 0x12, 0x79, 0x59, 0x00, 0x2f, 0x90, 0x88, 0xe1, 0x2a, 0x98, 0x93,
	0x24, 0xc1, 0x42, 0xa2, 0x24, 0xd5, 0x1a, 0x4d, 0xd5, 0xaa, 0xbb, 0x7f, 0x02, 0x30, 0x00, 0x0d,
	0x94, 0xb0, 0x8c, 0x4a, 0x6d, 0xb6, 0x59, 0xb7, 0xe6, 0x77, 0x56, 0xec, 0xea, 0x61, 0xb9, 0xfe,
	0x7d, 0x53, 0xec, 0x03, 0x46, 0xe8, 0xfe, 0xe3, 0x8b, 0x2b, 0x53, 0xf9, 0xf4, 0xc3, 0xb4, 0x22,
	0x22, 0xe3, 0xcc, 0xb7, 0x03, 0x96, 0x54, 0xfa, 0x57, 0x3f, 0x5b, 0x22, 0x7c, 0xe3, 0xc8, 0xf3,
	0x14, 0x8b, 0x22, 0x41, 0xb8, 0x55, 0x69, 0x68, 0x82, 0xf9, 0x18, 0x93, 0x28, 0x96, 0x9e, 0x48,
	0x11, 0xd5, 0x6e, 0x37, 0x55, 0x6b, 0xc6, 0x05, 0x65, 0xe8, 0x38, 0x45, 0xf4, 0xe9, 0xc2, 0xbb,
	0x8e, 0xa9, 0x7c, 0xe8, 0x98, 0xca, 0xaf, 0x8e, 0xa9, 0xac, 0x3d, 0x04, 0x0f, 0x26, 0x18, 0xe6,
	0x62, 0x91, 0x32, 0x2a, 0xf0, 0xda, 0x47, 0x15, 0xc0, 0x1c, 0x7f, 0x8b, 0x48, 0xf2, 0xcf, 0x7e,
	0xae, 0x83, 0x59, 0xd1, 0x46, 0xa9, 0x47, 0xc2, 0xca, 0x54, 0xd0, 0xbd, 0x32, 0x1b, 0x79, 0xa1,
	0xc3, 0xe7, 0x6e, 0x23, 0x87, 0x0e, 0x43, 0xb8, 0x0e, 0xee, 0x0c, 0x09, 0x5d, 0x59, 0xb8, 0x70,
	0x5d, 0xe3, 0x91, 0xde, 0x57, 0x81, 0x3e, 0xde, 0xdb, 0xa0, 0xf5, 0xd3, 0xe2, 0x53, 0x74, 0x71,
	0x2b, 0xa3, 0xe1, 0x7f, 0x6d, 0x7d, 0xa2, 0xa2, 0xa3, 0xf7, 0xf6, 0xdb, 0xda, 0xf9, 0x5a, 0x03,
	0xf5, 0x23, 0x11, 0xc1, 0x13, 0xb0, 0x38, 0x36, 0x26, 0x8f, 0xec, 0xb1, 0x19, 0xb5, 0x27, 0xb8,
	0xa3, 0xdb, 0x37, 0xe3, 0xf5, 0xef, 0x84, 0x11, 0xb8, 0x3b, 0xea, 0xe0, 0xc6, 0x94, 0x12, 0xc3,
	0x34, 0x7d, 0xeb, 0x46, 0xb4, 0xc1, 0x45, 0x27, 0x60, 0x71, 0x4c, 0xf0, 0x29, 0x8f, 0x1a, 0xe5,
	0x4d, 0x7b, 0xd4, 0x34, 0x21, 0xf7, 0x9f, 0x5d, 0x74, 0x0d, 0xf5, 0xb2, 0x6b, 0xa8, 0x3f, 0xbb,
	0x86, 0xfa, 0xbe, 0x67, 0x28, 0x97, 0x3d, 0x43, 0xf9, 0xde, 0x33, 0x94, 0xd7, 0x1b, 0xd7, 0x86,
	0xa6, 0xc5, 0x32, 0xfe, 0x44, 0xb6, 0x99, 0x53, 0x6c, 0xc6, 0xb3, 0x72, 0x37, 0x16, 0x73, 0xe3,
	0x37, 0x8a, 0x9d, 0xb5, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x90, 0x45, 0x33, 0x35, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateAtomicSwap defines a method for creating an atomic swap
	CreateAtomicSwap(ctx context.Context, in *MsgCreateAtomicSwap, opts ...grpc.CallOption) (*MsgCreateAtomicSwapResponse, error)
	// ClaimAtomicSwap defines a method for claiming an atomic swap
	ClaimAtomicSwap(ctx context.Context, in *MsgClaimAtomicSwap, opts ...grpc.CallOption) (*MsgClaimAtomicSwapResponse, error)
	// RefundAtomicSwap defines a method for refunding an atomic swap
	RefundAtomicSwap(ctx context.Context, in *MsgRefundAtomicSwap, opts ...grpc.CallOption) (*MsgRefundAtomicSwapResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAtomicSwap(ctx context.Context, in *MsgCreateAtomicSwap, opts ...grpc.CallOption) (*MsgCreateAtomicSwapResponse, error) {
	out := new(MsgCreateAtomicSwapResponse)
	err := c.cc.Invoke(ctx, "/fury.bep3.v1beta1.Msg/CreateAtomicSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAtomicSwap(ctx context.Context, in *MsgClaimAtomicSwap, opts ...grpc.CallOption) (*MsgClaimAtomicSwapResponse, error) {
	out := new(MsgClaimAtomicSwapResponse)
	err := c.cc.Invoke(ctx, "/fury.bep3.v1beta1.Msg/ClaimAtomicSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RefundAtomicSwap(ctx context.Context, in *MsgRefundAtomicSwap, opts ...grpc.CallOption) (*MsgRefundAtomicSwapResponse, error) {
	out := new(MsgRefundAtomicSwapResponse)
	err := c.cc.Invoke(ctx, "/fury.bep3.v1beta1.Msg/RefundAtomicSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateAtomicSwap defines a method for creating an atomic swap
	CreateAtomicSwap(context.Context, *MsgCreateAtomicSwap) (*MsgCreateAtomicSwapResponse, error)
	// ClaimAtomicSwap defines a method for claiming an atomic swap
	ClaimAtomicSwap(context.Context, *MsgClaimAtomicSwap) (*MsgClaimAtomicSwapResponse, error)
	// RefundAtomicSwap defines a method for refunding an atomic swap
	RefundAtomicSwap(context.Context, *MsgRefundAtomicSwap) (*MsgRefundAtomicSwapResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAtomicSwap(ctx context.Context, req *MsgCreateAtomicSwap) (*MsgCreateAtomicSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAtomicSwap not implemented")
}
func (*UnimplementedMsgServer) ClaimAtomicSwap(ctx context.Context, req *MsgClaimAtomicSwap) (*MsgClaimAtomicSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAtomicSwap not implemented")
}
func (*UnimplementedMsgServer) RefundAtomicSwap(ctx context.Context, req *MsgRefundAtomicSwap) (*MsgRefundAtomicSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundAtomicSwap not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAtomicSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAtomicSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAtomicSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fury.bep3.v1beta1.Msg/CreateAtomicSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAtomicSwap(ctx, req.(*MsgCreateAtomicSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAtomicSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAtomicSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAtomicSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fury.bep3.v1beta1.Msg/ClaimAtomicSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAtomicSwap(ctx, req.(*MsgClaimAtomicSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RefundAtomicSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundAtomicSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundAtomicSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fury.bep3.v1beta1.Msg/RefundAtomicSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundAtomicSwap(ctx, req.(*MsgRefundAtomicSwap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fury.bep3.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAtomicSwap",
			Handler:    _Msg_CreateAtomicSwap_Handler,
		},
		{
			MethodName: "ClaimAtomicSwap",
			Handler:    _Msg_ClaimAtomicSwap_Handler,
		},
		{
			MethodName: "RefundAtomicSwap",
			Handler:    _Msg_RefundAtomicSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fury/bep3/v1beta1/tx.proto",
}

func (m *MsgCreateAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeightSpan != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeightSpan))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAtomicSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAtomicSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAtomicSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RandomNumber) > 0 {
		i -= len(m.RandomNumber)
		copy(dAtA[i:], m.RandomNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RandomNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAtomicSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAtomicSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAtomicSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefundAtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapID) > 0 {
		i -= len(m.SwapID)
		copy(dAtA[i:], m.SwapID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SwapID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundAtomicSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAtomicSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAtomicSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.HeightSpan != 0 {
		n += 1 + sovTx(uint64(m.HeightSpan))
	}
	return n
}

func (m *MsgCreateAtomicSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RandomNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAtomicSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefundAtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SwapID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRefundAtomicSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightSpan", wireType)
			}
			m.HeightSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightSpan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAtomicSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAtomicSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAtomicSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAtomicSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAtomicSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAtomicSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAtomicSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAtomicSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAtomicSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
